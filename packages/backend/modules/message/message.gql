type Message {
  id: ID!
  value: String!
  direction: MessageDirection!
  clientId: ID!
  client: Client
  createdAt: DateTime!
}

enum MessageDirection {
  IN
  OUT
}

extend type Client {
  messages: [Message!]
}

input MessageWhere {
  clientId: String
}

input MessageWhereUnique {
  id: ID!
}

input MessageCreate {
  value: String!
  clientId: ID!
  direction: MessageDirection!
}

type Query {
  message(where: MessageWhereUnique!): Message
  messages(where: MessageWhere): [Message!]!
}

type Mutation {
  createMessage(data: MessageCreate!): Message!
}

type Subscription {
  messageCreated: Message!
}
